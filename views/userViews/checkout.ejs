<%- include('../layout/userlayout/header', { isLogin: isLogin }) -%>

<style>
    .address-box {
        border: 1px solid #000;
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 10px;
        position: relative;
        background-color: #fff;
        color: #000;
    }

    .address-box input[type="radio"] {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        margin: 0;
    }

    .address-box p {
        margin: 5px 0;
        padding-left: 40px; /* Adjust padding to make space for the radio button */
    }

    .address-box h4 {
        margin-bottom: 10px;
        padding-left: 40px; /* Adjust padding to make space for the radio button */
    }

    .breadcrumbs, .colorlib-product, .cart-detail, .form-group, .radio, .checkbox {
        color: #000;
    }

    .toggle-button {
        margin-bottom: 20px;
        cursor: pointer;
        color: #2196F3;
    }
    #snackbar {
  visibility: hidden; /* Hidden by default. Visible on click */
  min-width: 250px; /* Set a default minimum width */
  margin-left: -125px; /* Divide value of min-width by 2 */
  background-color: #28A745; /* Black background color */
  color: #fff; /* White text color */
  text-align: center; /* Centered text */
  border-radius: 2px; /* Rounded borders */
  padding: 16px; /* Padding */
  position: fixed; /* Sit on top of the screen */
  z-index: 1; /* Add a z-index if needed */
  left: 50%; /* Center the snackbar */
  bottom: 30px; /* 30px from the bottom */
}

/* Show the snackbar when clicking on a button (class added with JavaScript) */
#snackbar.show {
  visibility: visible; /* Show the snackbar */
  /* Add animation: Take 0.5 seconds to fade in and out the snackbar.
  However, delay the fade out process for 2.5 seconds */
  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
  animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

/* Animations to fade the snackbar in and out */
@-webkit-keyframes fadein {
  from {bottom: 0; opacity: 0;}
  to {bottom: 30px; opacity: 1;}
}

@keyframes fadein {
  from {bottom: 0; opacity: 0;}
  to {bottom: 30px; opacity: 1;}
}

@-webkit-keyframes fadeout {
  from {bottom: 30px; opacity: 1;}
  to {bottom: 0; opacity: 0;}
}

@keyframes fadeout {
  from {bottom: 30px; opacity: 1;}
  to {bottom: 0; opacity: 0;}
}
.cart-detail p {
    margin-bottom: 10px; /* Adjust the margin bottom as per your preference */
    display: flex;
    justify-content: space-between;
}

.cart-detail span {
    text-align: right;
    flex-shrink: 0;
    min-width: 80px; /* Adjust this value to align the prices correctly */
}
/* Ensure that the row uses flexbox */
.form-group.d-flex {
    display: flex;
    align-items: center;
}

/* Adjust margins for better alignment */
.form-group .col-sm-6 {
    margin-bottom: 0;
    padding-right: 0;
}

.form-group .col-sm-3 {
    margin-bottom: 0;
    padding-left: 0;
    padding-right: 0;
    margin-left: 10px; /* Adjust this value to control spacing between input and button */
}
.coupon-container {
    margin-bottom: 10px;
}

.coupon-box {
    margin-top: 5px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    background-color: #fff;
    width: 250px; /* Set a fixed width to make it smaller */
}

.copy-icon {
    width: 15px; /* Make the icon smaller */
    margin-left: 5px;
    vertical-align: middle; /* Align the icon vertically in the middle */
    cursor: pointer;
}

.coupon-box p {
    margin: 3px 0; /* Reduce the margin between paragraphs */
    font-size: 0.9em; /* Make the text slightly smaller */
} 
</style>

<div class="breadcrumbs">
    <div class="container">
        <div class="row">
            <div class="col">
                <p class="bread"><span><a href="index.html">Home</a></span> / <span>Checkout</span></p>
            </div>
        </div>
    </div>
</div>

<div class="colorlib-product">
    <div class="container">
        <div class="row row-pb-lg">
            <div class="col-sm-10 offset-md-1">
                <div class="process-wrap">
                    <div class="process text-center active">
                        <p><span>01</span></p>
                        <h3>Shopping Cart</h3>
                    </div>
                    <div class="process text-center active">
                        <p><span>02</span></p>
                        <h3>Checkout</h3>
                    </div>
                    <div class="process text-center">
                        <p><span>03</span></p>
                        <h3>Order Complete</h3>
                    </div>
                </div>
            </div>
        </div>
       
       
        <div class="row">
            <div class="col-lg-8">
                <h3>Addresses</h3>
                <div class="d-flex justify-content-end mb-4">
                    <button class="btn btn-add" data-bs-toggle="modal" data-bs-target="#addAddressModal">Add Address</button>
                </div>
                
                <ul class="list-unstyled">
                    <% address.forEach(function(address, index) { %>
                        <li class="address-box" <%= index > 0 ? 'style="display:none;"' : '' %>>
                            <input type="radio" name="address" value="<%= address._id %>" class="address-radio">
                            <h4><%= address.name %></h4>
                            <p><strong>Street:</strong> <%= address.street %></p>
                            <p><strong>City:</strong> <%= address.city %></p>
                            <p><strong>State:</strong> <%= address.state %></p>
                            <p><strong>ZIP Code:</strong> <%= address.zipcode %></p>
                            <p><strong>Mobile:</strong> <%= address.mobile %></p>
                        </li>
                    <% }) %>
                </ul>
              
                <% if (address.length > 1) { %>
                <div class="toggle-button">Show more addresses</div>
                <% } %>
                <form action="#">
                    <div class="row form-group d-flex align-items-center">
                        <div class="col-sm-6">
                            <input type="text" name="quantity" id="couponCodeInput" class="form-control input-number" placeholder="Your Coupon Number...">
                        </div>
                        <div class="col-sm-3">
                            <button type="button" id="applyCouponButton" class="btn btn-info">Apply Coupon</button>                         
                        </div>
                    </div>
                    <button type="button" class="btn btn-warning view-coupon-button">View Coupons</button>
                    <div class="coupon-container" style="display: none;">
                        <% coupons.forEach(function(coupon, index) { %>
                            <div class="coupon-box shadow-box">
                                <p >
                                    <strong>Coupon Code:</strong>
                                    <span ><%= coupon.couponCode %></span>
                                    <img src="/static/user/images/copy.png" alt="Copy" style="width: 10px; cursor: pointer; margin-left: 20px;" onclick="copyCouponCode('<%= coupon.couponCode %>')">
                                </p>
                                <p class="text-success"><strong>Discount:</strong> <%= coupon.percentage %>%</p>
                                <p class="text-danger"><strong>Expires:</strong> <%= coupon.expiryDate.toLocaleDateString() %></p>
                            </div>
                        <% }) %>
                    </div>
                    
                    
                </form>
                
            </div>
            

            <div class="col-lg-4">
                <div class="row">
                    <div class="col-md-12">
                        <div class="cart-detail">
                            <h2>Cart Total</h2> 
                            <p>Subtotal:<span id="checkoutSubTotal">₹0.00</span></p> 

                            <% if (cartDatas && cartDatas.products && cartDatas.products.length > 0) { %>
                                <% cartDatas.products.forEach(item => { %>
                                    <p><%= item.quantity %> x <%= item.productId.name %> <span> &#8377;<%= (item.productId.discountPrice * item.quantity).toFixed(2) %></span></p>
                                <% }) %>
                            <% } else { %>
                                <p>Your cart is empty.</p>
                            <% } %>
                            
                                        <p>Discount: <span id="checkoutDiscount">₹0.00</span></p>
                                        <p>coupon Discount : <span id="checkoutCouponDiscount">₹0.00</span></p>
                                <p>Delivery : <span class="text-success">FREE <del class="text-muted">40</del></span></p>
                                <p>Total: <span id="checkoutTotal">₹0.00</span></p>
                                
                            
                        </div>
                    </div>

                  
                    <!--  -->
                    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="addAddressForm">
                                        <div class="mb-3">
                                            <label for="addressName" class="form-label">Name</label>
                                            <input type="text" class="form-control" id="addressName" required>
                                            <p id="addAddressNameError" style="color: red; display: none;" >Name is requried</p>
                                        </div>
                                        <div class="mb-3">
                                            <label for="addressStreet" class="form-label">Street</label>
                                            <input type="text" class="form-control" id="addressStreet" required>
                                            <p id="addAddressStreetError" style="color: red; display: none;">Street Name is required</p>
                                        </div>
                                        <div class="mb-3">
                                            <label for="addressCity" class="form-label">City</label>
                                            <input type="text" class="form-control" id="addressCity" required>
                                            <p id="addAddressCityError" style="color: red; display: none;">City is required </p>
                                        </div>
                                        <div class="mb-3">
                                            <label for="addressState" class="form-label">State</label>
                                            <input type="text" class="form-control" id="addressState" required>
                                            <p id="addAddressStateError" style="color: red; display: none;">State is required</p>
                                        </div>
                                        <div class="mb-3">
                                            <label for="addressZip" class="form-label">ZIP Code</label>
                                            <input type="number" class="form-control" id="addressZip" required>
                                            <p id="addAddressZipError" style="color: red; display: none;">Zip Code is required</p>
                                        </div>
                                        <div class="mb-3">
                                            <label for="addressMobile" class="form-label">Mobile</label>
                                            <input type="text" class="form-control" id="addressMobile" required>
                                            <p id="addAddressMobileError" style="color: red; display: none;">Mobile NUmber is required</p>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-add"  onclick="submitAddressForm()">Add Address</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--  -->
                   
                      
                    
                    <div class="w-100"></div>

                    <div class="col-md-12">
                        <div class="cart-detail">
                            <h2>Payment Method</h2>
                            <div class="form-group">
                                <div class="col-md-12">
                                    <div class="radio">
                                        <label><input type="radio" value="RazorPay" name="optradio">RazorPay</label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-12">
                                    <div class="radio">
                                        <label><input type="radio" value="cod" name="optradio"> Cash On Delivery</label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-12">
                                    <div class="radio">
                                        <label><input type="radio" value="wallet" name="optradio"> Wallet</label>
                                    </div>
                                </div>
                            </div>
                           
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 text-center">
                        <p><a href="#" class="btn btn-dark">Place an order</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="snackbar"></div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.x.x/dist/js/bootstrap.bundle.min.js"></script>

<script>

          
document.querySelector('.view-coupon-button').addEventListener('click', function() {
        const couponContainer = document.querySelector('.coupon-container');
        if (couponContainer.style.display === 'none' || couponContainer.style.display === '') {
            couponContainer.style.display = 'block';
        } else {
            couponContainer.style.display = 'none';
        }
    });

    function copyCouponCode(couponCode) {
        navigator.clipboard.writeText(couponCode).then(function() {
            showsnackbar('Coupon code copied to clipboard');
        }, function(err) {
            console.error('Could not copy text: ', err);
        });
    }
    document.addEventListener('DOMContentLoaded', function() {
        const toggleButton = document.querySelector('.toggle-button');
        const addressBoxes = document.querySelectorAll('.address-box');
        let displayState = sessionStorage.getItem('displayState') || 'first';
      
        function updateDisplay(state) {
            if (state === 'first') {
                addressBoxes.forEach((box, index) => {
                    box.style.display = index > 0 ? 'none' : 'block';
                });
                toggleButton.textContent = 'Show more addresses';
            } else {
                addressBoxes.forEach((box) => {
                    box.style.display = 'block';
                });
                toggleButton.textContent = 'Show fewer addresses';
            }
        }
         
        
   
        updateDisplay(displayState);

        toggleButton.addEventListener('click', function() {
            if (displayState === 'first') {
                displayState = 'all';
            } else {
                displayState = 'first';
            }
            sessionStorage.setItem('displayState', displayState);
            updateDisplay(displayState);
        });

        const radios = document.querySelectorAll('.address-radio');
        radios.forEach(radio => {
            radio.addEventListener('change', function() {
                radios.forEach(r => r.checked = false);
                this.checked = true;
            });
        });
    });

    //add address

    function submitAddressForm() {
            
            let name= document.getElementById('addressName').value
            let nameError=document.getElementById('addAddressNameError')
           let  street= document.getElementById('addressStreet').value
           let streetError=document.getElementById('addAddressStreetError')
           let city= document.getElementById('addressCity').value
           let cityError=document.getElementById('addAddressCityError')
           let state= document.getElementById('addressState').value
           let stateError=document.getElementById('addAddressStateError')
            let zipcode= document.getElementById('addressZip').value
            let zipcodeError=document.getElementById('addAddressZipError')
           let mobile= document.getElementById('addressMobile').value
           let mobileError=document.getElementById('addAddressMobileError')
        

           let validate=true

           if(name.trim()==''){
            nameError.style.display='block'
            validate=false
           }
           if(street.trim()==''){
            streetError.style.display='block'
            validate=false
           }
           if(city.trim()==''){
            cityError.style.display='block'
            validate=false
           }
           if(state.trim()==''){
            stateError.style.display='block'
            validate=false
           }
           if(zipcode.trim()==''){
            zipcodeError.style.display='block'
            validate=false
           }
           if(mobile.trim()==''){
            mobileError.style.display='block'
            validate=false
           }

           
        
        if(validate){
            const formData = {
        name: name,
        street: street,
        city: city,
        state: state,
        zipcode: zipcode,
        mobile: mobile
    };
            fetch('/cart/checkout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log(data)
                showsnackbar('Address added successfully!')
                $('#addAddressModal').modal('hide')
                
                setTimeout(() => {
            window.location.reload(); 
        }, 1000); 

                
                const addressesContainer = document.getElementById('addressesContainer');
                
              
            } else {
                showsnackbar('Failed to add address. Please try again.');
            }
        })
        .catch(error => {
            console.error('Error adding address:', error);
            alert('Failed to add address. Please try again.');
        });
    }
        }

        //subtotal,discount,total

        function formatPrice(price){
        return `${parseFloat(price).toFixed(2)}`
    }
        function loadCartValues(){
            const subtotal=localStorage.getItem('cartSubTotal',)
            const discount=localStorage.getItem('cartDiscount')
            const total=localStorage.getItem('cartTotal')

            if(subtotal && discount && total){
                document.getElementById('checkoutSubTotal').textContent=formatPrice(subtotal)
                console.log(subtotal,'sub')
                document.getElementById('checkoutDiscount').textContent=formatPrice(discount)
                console.log(discount,'dis')
                document.getElementById('checkoutTotal').textContent=formatPrice(total)
                console.log(total,'total')
            }else{
                console.log('cart values not found in local storage')
            }
        }
        document.addEventListener('DOMContentLoaded', loadCartValues);

       
       
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
    const placeOrderBtn = document.querySelector('.btn-dark');
    placeOrderBtn.addEventListener('click', function(e) {
        e.preventDefault();
        placeOrder();
    });
});

async function placeOrder() {
    
    const selectedAddress = document.querySelector('input[name="address"]:checked');
    if (!selectedAddress) {
        Swal.fire('Error', 'Please select an address', 'error');
        return;
    }

   
    const selectedPaymentMethod = document.querySelector('input[name="optradio"]:checked');
    if (!selectedPaymentMethod) {
        Swal.fire('Error', 'Please select a payment method', 'error');
        return;
    }

    
    const totalPrice = parseFloat(document.getElementById('checkoutTotal').textContent.replace('₹', ''));

    // Confirm order placement
    const result = await Swal.fire({
        title: 'Confirm Order',
        text: 'Are you sure you want to place this order?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, place order',
        cancelButtonText: 'No, cancel'
    });

    if (result.isConfirmed) {
        try {
            const orderData = {
                selectedAddress: selectedAddress.value,
                paymentMethod: selectedPaymentMethod.value,
                totalPrice: totalPrice
            };
            console.log(orderData);

            const response = await fetch('/cart/createOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orderData)
            });

            
            const data = await response.json()

                if (response.ok) {
                    console.log('Server response:', data); 

                    if (data.success && data.paymentStatus == 'COD') {
                        Swal.fire('Success', 'Order placed successfully!', 'success').then(() => {
                            window.location.href = '/orderComplete';
                        });
                    }if(data.status == 'success' && data.paymentStatus == 'ONLINE-PAYMENT'){
                        razorpayPayment(data.newOrder)
                    }else if(data.success && data.paymentStatus == 'WALLET'){
                        Swal.fire('Sucesss','Order placed successfully using Wallet','sucess').then(()=>{
                            window.location.href='/orderComplete'
                        })

                    }
                    else {
                        if (data.message === "Cannot place order in COD") {
                            Swal.fire('Error', 'Cash on Delivery is not available for orders above ₹1000', 'error');
                        } else {
                            Swal.fire('Error', data.message || 'Failed to place order. Please try again.', 'error');
                        }
                    }
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
            
        } catch (error) {
            console.error('Error placing order:', error);
            console.error('Error details:', error.message);
            Swal.fire('Error', `An unexpected error occurred. Please try again. Error: ${error.message}`, 'error');
        }
    }
}
function razorpayPayment(order) {
    try {
        var options = {
            "key": "rzp_test_6ytH1LIMzwzSEq", // Enter the Key ID generated from the Dashboard
            "amount": order.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
            "currency": "INR",
            "name": "ESSENZI",
            "description": "Test Transaction",
            "image": "https://example.com/your_logo",
            "order_id": order.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
            "handler": function (response) {
                console.log("response:---", response)
                verifyPayment(response, order);
            },
            "prefill": {
                "name": "Gaurav Kumar",
                "email": "gaurav.kumar@example.com",
                "contact": "9544880584",
            },
            "notes": {
                "address": "Razorpay Corporate Office"
            },
            "theme": {
                "color": "#3399cc"
            }
        };
        var rzp1 = new Razorpay(options);
        rzp1.open();
        rzp1.on('error', () => {
            console.log("error on razorpay")
        })
    } catch (error) {
        console.log(error)
        console.log(error.message)
    }
}
const verifyPayment = async (payment, order) => {
    try {
        $.ajax({
            url: '/cart/verifyPayment',
            data: {
                payment,
                order
            },
            method: 'POST',
            success: (response) => {
                console.log("payment successfull")
                if (response.paymentStatus == 'ONLINE-PAYMENT-SUCCESS') {
                    location.href = '/orderComplete'
                }
            }
        })

    } catch (error) {
        console.log(error)
    }
}

const handleFailure = async (payment,order)=>{
    try {
        const response =await fetch('/orderFailure',{
            method:'POST',
            headers:{"Content-Type":"aplication/json"},
            body:JSON.stringify({order,payment})
        })
        if(response.ok){
            const result = await response.json()
            alert('order not completed despute payment failure')
        }else{
            alert('failed please try again...')
        }
    } catch (error) {
        console.log(error.message)
    }
}

document.getElementById("applyCouponButton").addEventListener("click", function() {
    console.log('Button clicked');

    var couponCode = document.getElementById("couponCodeInput").value;
    console.log(couponCode, 'Coupon Code');

    var subTotal = parseFloat(document.getElementById("checkoutSubTotal").innerText.replace('₹', ''));
    console.log(subTotal, 'SubTotal');

    var discountPrice = parseFloat(document.getElementById('checkoutDiscount').innerText.replace('₹',''))
    console.log(discountPrice,'discount123FDJSALDJFA')

    var totalPrice = parseFloat(document.getElementById('checkoutTotal').innerText.replace('₹',''))
    
    var couponDiscount = parseFloat(document.getElementById('checkoutCouponDiscount').innerText.replace('₹',''))

    if (!couponCode) {
        showsnackbar("Please enter a coupon code");
        return;
    }

    fetch('/applyCoupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ couponCode: couponCode, subTotal: subTotal })
        
    })
    .then(response => {
        console.log('Response status:', response.status); // Check the status
        return response.json(); // Parse JSON from response
    })
    .then(data => {
        console.log('Response data:', data); // Log the response data

        if (data.success) {
            var discount = discountPrice;
            var couponDiscount = (data.percentage / 100) * totalPrice;
            var total = subTotal - (couponDiscount + discount);

            document.getElementById("checkoutDiscount").innerText = '₹' + discount.toFixed(2);
            document.getElementById("checkoutTotal").innerText = '₹' + total.toFixed(2);
            document.getElementById('checkoutCouponDiscount').innerText = '₹' + couponDiscount.toFixed(2);
             document.getElementById("applyCouponButton").innerText = "Remove Coupon"
             document.getElementById("applyCouponButton").setAttribute("id","removeCouponButton")
             document.getElementById("removeCouponButton").classList.remove("btn-info");
             document.getElementById("removeCouponButton").classList.add("btn-danger");

             showsnackbar("Coupon applied successfully");
             document.getElementById("removeCouponButton").addEventListener("click", function() {
                fetch('/removeCoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                       
                        document.getElementById("checkoutDiscount").innerText = '₹' + discount.toFixed(2);
                        document.getElementById("checkoutTotal").innerText = '₹' + total.toFixed(2);
                        document.getElementById("couponCodeInput").value = "";
                        document.getElementById("removeCouponButton").innerText = "Apply Coupon";
                        document.getElementById("removeCouponButton").setAttribute("id", "applyCouponButton");
                        document.getElementById("applyCouponButton").classList.remove("btn-danger");
                        document.getElementById("applyCouponButton").classList.add("btn-info");

                        showsnackbar("Coupon removed successfully");
                        setTimeout(()=>{
                            location.reload()
                        },1000)

                    } else {
                        showsnackbar(data.message || "Error removing coupon");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    showsnackbar("An error occurred while removing the coupon.");
                });
            });
        } else {
            showsnackbar(data.message || "Invalid coupon code");
        }
    })
    .catch(error => {
        console.error("Error:", error);
        showsnackbar("An error occurred. Please try again.");
    });
    
});

function showsnackbar(text) {
  // Get the snackbar DIV
  var x = document.getElementById("snackbar");
    x.innerHTML=text
  // Add the "show" class to DIV
  x.className = "show";

  // After 3 seconds, remove the show class from DIV
  setTimeout(function(){ x.className = x.className.replace("show", ""); }, 3000);
}

</script>

<%- include('../layout/userlayout/footer') -%>
