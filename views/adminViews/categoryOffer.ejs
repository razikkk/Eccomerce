<%- include('../layout/adminlayout/header')-%>

<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title"></h4>
            <p class="card-description"> <code>cateogory</code></p>
            <button class="badge badge-success border-0" id="openAddModal">Add Offer</button>

            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Category Name</th>
                            <th>Percentage</th>
                            <th>Expiry Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% offers.forEach(offer => { %>
                        <tr>
                            <td><%= offer.categoryId ? offer.categoryId.categoryName : 'n/a' %></td>
                            <td><%= offer.percentage %></td>
                            <td class="text-danger">
                                <%= new Date(offer.expiryDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) %>
                            </td>
                            
                            <td>
                                <label class="badge badge-warning editOfferButton" data-offer='<%= JSON.stringify(offer) %>'>Edit</label>
                                <label class="badge badge-info deleteOfferButton" data-offer-id="<%=offer._id%>">Delete</label>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Offer Modal -->
<div id="addOfferModal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeAddModal">&times;</span>
        <form id="addOfferForm">
            <div class="form-group">
                <label for="category" style="color: black;">Category:</label>
                <select id="category" name="category" required>
                    <% categories.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.categoryName %></option>
                    <% }); %>
                </select>
                <div id="categoryError" style="color: red;"></div>
            </div>
            <div class="form-group">
                <label for="percentage" style="color: black;">Percentage:</label>
                <input type="number" id="percentage" name="percentage">
                <div id="percentageError" style="color: red;"></div>
            </div>
            <div class="form-group">
                <label for="expiryDate" style="color: black;">Expiry Date:</label>
                <input type="date" id="expiryDate" name="expiryDate">
                <div id="expiryDateError" style="color: red;"></div>
            </div>
            <button type="submit" class="btn btn-primary">Add Offer</button>
        </form>
    </div>
</div>


<!-- Edit Offer Modal -->
<div id="editOfferModal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeEditModal">&times;</span>
        <h2>Edit Offer</h2>
        <form id="editOfferForm">
            <input type="hidden" id="editOfferId" name="offerId">
            <div class="form-group">
                <label for="editCategory">Category:</label>
                <select id="editCategory" name="category" disabled>
                    <% categories.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.categoryName %></option>
                    <% }); %>
                </select>
                <div id="editCategoryError" style="color: red;"></div>
            </div>
            <div class="form-group">
                <label for="editPercentage">Percentage:</label>
                <input type="number" id="editPercentage" name="percentage">
                <div id="editPercentageError" style="color: red;"></div>
            </div>
            <div class="form-group">
                <label for="editExpiryDate">Expiry Date:</label>
                <input type="date" id="editExpiryDate" name="expiryDate">
                <div id="editExpiryDateError" style="color: red;"></div>
            </div>
            <button type="submit" class="btn btn-primary">Edit Offer</button>
        </form>
    </div>
</div>


<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
        animation: fadeIn 0.5s;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 90%;
        max-width: 500px;
        animation: slideIn 0.5s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 8px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 10px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group input:focus,
    .form-group select:focus {
        border-color: #80bdff;
        outline: none;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.25);
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        outline: none;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        box-shadow: 0 4px #999;
        transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s;
    }

    .btn:hover {
        background-color: #0056b3;
        box-shadow: 0 6px #666;
        transform: translateY(-2px);
    }

    .btn:active {
        background-color: #0056b3;
        box-shadow: 0 2px #666;
        transform: translateY(2px);
    }

    @keyframes slideIn {
        from {bottom: -300px; opacity: 0} 
        to {bottom: 0; opacity: 1}
    }

    @keyframes fadeIn {
        from {opacity: 0} 
        to {opacity: 1}
    }
    #snackbar {
  visibility: hidden; /* Hidden by default. Visible on click */
  min-width: 250px; /* Set a default minimum width */
  margin-left: -125px; /* Divide value of min-width by 2 */
  background-color: #333; /* Black background color */
  color: #fff; /* White text color */
  text-align: center; /* Centered text */
  border-radius: 2px; /* Rounded borders */
  padding: 16px; /* Padding */
  position: fixed; /* Sit on top of the screen */
  z-index: 1; /* Add a z-index if needed */
  left: 50%; /* Center the snackbar */
  bottom: 30px; /* 30px from the bottom */
}

/* Show the snackbar when clicking on a button (class added with JavaScript) */
#snackbar.show {
  visibility: visible; /* Show the snackbar */
  /* Add animation: Take 0.5 seconds to fade in and out the snackbar.
  However, delay the fade out process for 2.5 seconds */
  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
  animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

/* Animations to fade the snackbar in and out */
@-webkit-keyframes fadein {
  from {bottom: 0; opacity: 0;}
  to {bottom: 30px; opacity: 1;}
}

@keyframes fadein {
  from {bottom: 0; opacity: 0;}
  to {bottom: 30px; opacity: 1;}
}

@-webkit-keyframes fadeout {
  from {bottom: 30px; opacity: 1;}
  to {bottom: 0; opacity: 0;}
}

@keyframes fadeout {
  from {bottom: 30px; opacity: 1;}
  to {bottom: 0; opacity: 0;}
}
</style>
<div id="snackbar"></div>

<script>
    
   document.addEventListener('DOMContentLoaded', function () {
    var addModal = document.getElementById("addOfferModal");
    var openAddModalBtn = document.getElementById("openAddModal");
    var closeAddModalBtn = document.getElementById("closeAddModal");

    openAddModalBtn.onclick = function() {
        addModal.style.display = "block";
    }

    closeAddModalBtn.onclick = function() {
        addModal.style.display = "none";
    }

    window.onclick = function(event) {
        if (event.target == addModal) {
            addModal.style.display = "none";
        }
    }

    function validateOfferForm(categoryId, percentage, expiryDate, errorElements) {
        let isValid = true;
        const percentageValue = parseFloat(percentage);
        const expiryDateValue = new Date(expiryDate);
        const today = new Date();

        // Clear previous error messages
        errorElements.categoryError.innerText = '';
        errorElements.percentageError.innerText = '';
        errorElements.expiryDateError.innerText = '';

        if (!categoryId) {
            errorElements.categoryError.innerText = 'Category is required';
            isValid = false;
        }

        if (!percentage || isNaN(percentageValue)) {
            errorElements.percentageError.innerText = 'Percentage is required and must be a valid number';
            isValid = false;
        } else if (percentageValue < 0 || percentageValue > 99) {
            errorElements.percentageError.innerText = 'Percentage must be between 0 and 99';
            isValid = false;
        }

        if (!expiryDate) {
            errorElements.expiryDateError.innerText = 'Expiry date is required';
            isValid = false;
        } else if (expiryDateValue < today) {
            errorElements.expiryDateError.innerText = 'Expiry date cannot be in the past';
            isValid = false;
        }

        return isValid;
    }

    document.getElementById('addOfferForm').onsubmit = function(event) {
        event.preventDefault();

        const categoryId = document.getElementById('category').value;
        const percentage = document.getElementById('percentage').value;
        const expiryDate = document.getElementById('expiryDate').value;

        const errorElements = {
            categoryError: document.getElementById('categoryError'),
            percentageError: document.getElementById('percentageError'),
            expiryDateError: document.getElementById('expiryDateError')
        };

        if (validateOfferForm(categoryId, percentage, expiryDate, errorElements)) {
            fetch('/admin/categoryOffer/addOffer', {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    categoryId,
                    percentage,
                    expiryDate
                })
            })
            .then(response => {
                if (!response.ok) {
                    console.log(response, 'jghj')
                    showsnackbar('Offer already exist');

                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('234')
                    showsnackbar('Offer added successfully');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                    addModal.style.display = 'none';
                } else {
                    console.log('sfd')
                    showsnackbar('Unable to add offer');
                }
            })
            .catch(error => {
                console.log(error.message);
            });
        }
    }
});


    // Edit Offer Modal
    var editModal = document.getElementById("editOfferModal");
    var closeEditModalBtn = document.getElementById("closeEditModal");

    closeEditModalBtn.onclick = function() {
        editModal.style.display = "none";
    }

    window.onclick = function(event) {
        if (event.target == editModal) {
            editModal.style.display = "none";
        }
    }

    // Edit offer button click
    document.querySelectorAll('.editOfferButton').forEach(button => {
        button.addEventListener('click', function() {
            var offer = JSON.parse(this.getAttribute('data-offer'));
            document.getElementById('editOfferId').value = offer._id;
            document.getElementById('editCategory').value = offer.categoryId._id;
            document.getElementById('editPercentage').value = offer.percentage;
            document.getElementById('editExpiryDate').value = new Date(offer.expiryDate).toISOString().split('T')[0];
            editModal.style.display = "block";
        });
    });

    document.getElementById("editOfferForm").onsubmit = function(event) {
    event.preventDefault();

    const offerId = document.getElementById("editOfferId").value;
    const categoryId = document.getElementById("editCategory").value;
    const percentage = document.getElementById("editPercentage").value;
    const expiryDate = document.getElementById("editExpiryDate").value;

    const errorElements = {
        categoryError: document.getElementById('editCategoryError'),
        percentageError: document.getElementById('editPercentageError'),
        expiryDateError: document.getElementById('editExpiryDateError')
    };

    if (validateOfferForm(categoryId, percentage, expiryDate, errorElements)) {
        fetch('/admin/categoryOffer/editOffer', {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                offerId,
                categoryId,
                percentage,
                expiryDate
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showsnackbar("Offer edited successfully");
                setTimeout(() => {
                    location.reload();
                }, 1000);
                editModal.style.display = 'none';
            } else {
                showsnackbar("Can't edit offer, please try again");
            }
        })
        .catch(error => {
            console.log(error.message);
        });
    }
}

function validateOfferForm(categoryId, percentage, expiryDate, errorElements) {
    let isValid = true;
    const percentageValue = parseFloat(percentage);
    const expiryDateValue = new Date(expiryDate);
    const today = new Date();

    // Clear previous error messages
    errorElements.categoryError.innerText = '';
    errorElements.percentageError.innerText = '';
    errorElements.expiryDateError.innerText = '';

    if (!categoryId) {
        errorElements.categoryError.innerText = 'Category is required';
        isValid = false;
    }

    if (!percentage || isNaN(percentageValue)) {
        errorElements.percentageError.innerText = 'Percentage is required and must be a valid number';
        isValid = false;
    } else if (percentageValue < 0 || percentageValue > 99) {
        errorElements.percentageError.innerText = 'Percentage must be between 0 and 99';
        isValid = false;
    }

    if (!expiryDate) {
        errorElements.expiryDateError.innerText = 'Expiry date is required';
        isValid = false;
    } else if (expiryDateValue < today) {
        errorElements.expiryDateError.innerText = 'Expiry date cannot be in the past';
        isValid = false;
    }

    return isValid;
}

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.deleteOfferButton').forEach(button => {
            button.addEventListener('click', function() {
                var offerId = this.getAttribute('data-offer-id');
                console.log(offerId,'hh')
                    fetch('/admin/categoryOffer/delete', {
                        method: 'DELETE',
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ offerId })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            showsnackbar('Offer deleted');
                            setTimeout(()=>{
                                location.reload();
                            },1000)

                        } else {
                            showsnackbar('Unable to delete offer');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                
            });
        });
    });

    function showsnackbar(text) {
  // Get the snackbar DIV
  var x = document.getElementById("snackbar");
    x.innerHTML = text
  // Add the "show" class to DIV
  x.className = "show";

  // After 3 seconds, remove the show class from DIV
  setTimeout(function(){ x.className = x.className.replace("show", ""); }, 3000);
}
</script>

<%- include('../layout/adminlayout/footer')-%>
