<%- include('../layout/adminlayout/header')-%>

<div class="col-lg-10 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Hoverable Table</h4>
            <p class="card-description">
                <code>Category Details</code>
                <button style="margin-left: 670px; margin-top: 20px; border: none;" class="badge badge-dark"
                    onclick="location.href='/admin/category/addCategory'">Add Categories</button>
                <button style="margin-left: 800px; margin-top: 20px; border:none;" class="badge badge-danger"
                    onclick="location.href='/admin/category/deletedCategory'">Deleted Categories</button>
            </p>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Category Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="table">
                        <% category.forEach(category => { %>
                            <tr>
                                <td style="color: white;">
                                    <%= category.categoryName %>
                                </td>
                                <td>
                                    <button class="badge badge-dark border-0"
                                        id="edit-btn" data-category-id="<%= category._id %>" data-category-name="<%= category.categoryName %>">Edit</button>
                                    <a href="#" class="btn btn-danger btn-sm"
                                        onclick="confirmDelete('<%= category._id %>')">Delete</a>
                                </td>
                            </tr>
                        <% }) %>
                        <div id="edit-modal" class="modal">
                            <div class="modal-content">
                                <span id="close-modal" class="close text-end">&times;</span>
                                <h3 class="mb-3 text-center">Edit Category</h3>
                                <div class="message-container">
                                    <span class="category-name-error text-danger" style="display: none;"></span>
                                </div>
                                <form id="categoryEditForm" action="#">
                                    <div class="form-group mb-3">
                                        <div class="row">
                                            <div class="col">
                                                <label for="categoryName"> Category Name<span style="color: red;">*</span></label>
                                                <input type="text" id="editCategoryName" class="form-control" name="categoryName">
                                                <p id="categoryNameError" style=" color: red;"></p>
                                            </div>
                                        </div>
                                    </div>
                                    <input type="hidden" name="categoryId" id="categoryIdInput">
                                    <div class="text-center">
                                        <button class="btn btn-primary" type="submit">Submit</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #070707;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 400px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: rgb(250, 247, 247);
        text-decoration: none;
        cursor: pointer;
    }
</style>

<script>
    // document.addEventListener('DOMContentLoaded', () => {
    //     const editButtons = document.querySelectorAll('[id^=openEditModalBtn]');
    //     const closeButtons = document.querySelectorAll('.close');
    //     const modals = document.querySelectorAll('[id^=categoryEditModal]');

    //     // Open the modal when the "Edit" button is clicked
    //     editButtons.forEach((button) => {
    //         button.addEventListener('click', () => {
    //             const modalId = button.id.replace('openEditModalBtn_', 'categoryEditModal_');
    //             const modal = document.getElementById(modalId);
    //             if (modal) {
    //                 modal.style.display = 'block';
    //             }
    //         });
    //     });

    //     // Close the modal when the "close" button is clicked
    //     closeButtons.forEach((button) => {
    //         button.addEventListener('click', () => {
    //             const modal = button.closest('.modal');
    //             if (modal) {
    //                 modal.style.display = 'none';
    //             }
    //         });
    //     });

    //     // Close the modal when clicking outside of the modal content
    //     window.addEventListener('click', (event) => {
    //         modals.forEach((modal) => {
    //             if (event.target === modal) {
    //                 modal.style.display = 'none';
    //             }
    //         });
    //     });

    //     const editForms = document.querySelectorAll('[id^=categoryEditForm]');

    //     editForms.forEach((form) => {
    //         form.addEventListener('submit', async (event) => {
    //             event.preventDefault();  // Prevent form submission until validation is done

    //             let validate = true;  // Variable to track if the form is valid

    //             const categoryNameInput = document.getElementById('editCategoryName')
    //             console.log(categoryNameInput)
    //             const categoryNameError = document.getElementById('categoryNameError')
    //             // console.log(categoryNameError)
    //             if (!categoryNameInput || !categoryNameError) {
    //                 console.error('Form elements not found.');
    //                 return; // Stop the execution if elements are not found
    //             }

    //             const originalCategoryName = categoryNameInput.defaultValue.trim();
    //             const newCategoryName = categoryNameInput.value.trim();

    //             // Reset error message visibility
    //             // categoryNameError.style.display = 'none';

    //             // Validate if the category name is empty
    //             if (newCategoryName === '') {
    //                 categoryNameError.innerText = 'Category name cannot be empty.';
    //                 // categoryNameError.style.display = 'block';
    //                 validate = false;
    //             }

    //             // Validate if the new category name is the same as the original
    //             if (newCategoryName === originalCategoryName) {
    //                 categoryNameError.innerText = 'Category name cannot be the same as the existing name.';
    //                 // categoryNameError.style.display = 'block';
    //                 validate = false;
    //             }

    //             if (validate) {
    //                 // If validation passes, submit the form
    //                 form.submit();
    //             }
    //         });
    //     });
    // });


    document.getElementById('table').addEventListener('click', (event) => {
        if(event.target.id == 'edit-btn'){
            event.preventDefault();
            let categoryId = event.target.getAttribute('data-category-id');
            let editModal = document.getElementById('edit-modal');
            let editInput = document.getElementById('editCategoryName');
            editModal.style.display = 'block';
            editInput.value = event.target.getAttribute('data-category-name');
            document.getElementById('categoryIdInput').value = categoryId;
        }
    });
    let editForm = document.getElementById('categoryEditForm')
    editForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const categoryNameInput = document.getElementById('editCategoryName').value;
        const categoryNameError = document.getElementById('categoryNameError');
        const namePattern = /^[A-Za-z\s]+$/;
        if(categoryNameInput == ''){
            categoryNameError.innerText = 'Category name cannot be empty';
            return;
        }
        if(!namePattern.test(categoryNameInput)){
            categoryNameError.innerText = 'Please enter a valid category name';
        }
        let categoryId = document.getElementById('categoryIdInput').value;
        const response = await fetch('/admin/category/edit', {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                categoryId: categoryId,
                categoryName: categoryNameInput,
            })
        });
        let editModal = document.getElementById('edit-modal');
        if(response.ok){
            editModal.style.display = 'none';
            location.reload();
        }else if(response.status == 409){
            categoryNameError.innerText = 'Category already exists';
        }else {
            categoryNameError.innerText = 'Something went wrong';
        }
    });

    document.getElementById('close-modal').addEventListener('click', (event) => {
        event.preventDefault();
        document.getElementById('edit-modal').style.display = 'none';
    })

</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
    function confirmDelete(categoryId) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'This category will get deleted',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'Cancel',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                axios.delete(`/admin/category/deleteCategory/?id=${categoryId}`)
                    .then((response) => {
                        if (response.data.success) {
                            Swal.fire(
                                'Deleted!',
                                'Your category has been deleted.',
                                'success'
                            ).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to delete the category.',
                                'error'
                            );
                        }
                    })
                    .catch((error) => {
                        console.error('Error deleting the category:', error);
                        Swal.fire(
                            'Error!',
                            'An error occurred while deleting the category.',
                            'error'
                        );
                    });
            }
        });
    }
</script>
