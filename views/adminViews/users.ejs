<%- include('../layout/adminlayout/header')-%>
<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Striped Table</h4>
            <p class="card-description"> <code>.Users</code></p>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>User</th>
                            <th>First name</th>
                            <th>Progress</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% const itemsPerPage = 5; %> 
                        <% const startIndex = (currentPage - 1) * itemsPerPage; %> 

                        <% users.forEach((user, index) => { %>
                            <tr>
                                <td><%= startIndex + index + 1 %></td>
                                <td class="py-1">
                                    <span style="color: white;">
                                        <%= user.name %>
                                    </span>
                                </td>
                                <td style="color: white;">
                                    <%= user.firstName %>
                                </td>
                                <td>
                                    <% if (user.is_blocked) { %>
                                        <button onclick="unblock('<%= user._id %>')" class="badge badge-success">UNBLOCK</button>
                                    <% } else { %>
                                        <button onclick="block('<%= user._id %>')" class="badge badge-danger">BLOCK</button>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>

            <!-- Pagination Controls -->
            <div class="row mt-3">
                <div class="col-md-12 text-center">
                    <ul class="pagination">
                        <% if (currentPage > 1) { %>
                            <li class="page-item">
                                <a class="page-link" href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
                            </li>
                        <% } %>

                        <% if (currentPage > 2) { %>
                            <li class="page-item">
                                <span class="page-link">...</span>
                            </li>
                        <% } %>

                        <% for (let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) { %>
                            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                            </li>
                        <% } %>

                        <% if (currentPage < totalPages - 1) { %>
                            <li class="page-item">
                                <span class="page-link">...</span>
                            </li>
                        <% } %>

                        <% if (currentPage < totalPages) { %>
                            <li class="page-item">
                                <a class="page-link" href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
                            </li>
                        <% } %>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    async function block(userId) {
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: "btn btn-success",
                cancelButton: "btn btn-danger"
            },
            buttonsStyling: true
        });

        swalWithBootstrapButtons.fire({
            title: "Are you sure?",
            text: "Do You want To Block This User!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Block User!",
            cancelButtonText: "Cancel!",
            reverseButtons: true
        }).then(async (result) => {
            if (result.isConfirmed) {
                const response = await fetch(`/admin/blockUser?userId=${userId}`, {
                    method: 'PUT'
                });
                if (response.ok) {
                    swalWithBootstrapButtons.fire({
                        title: "Blocked!",
                        text: "User has been blocked.",
                        icon: "success"
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    swalWithBootstrapButtons.fire({
                        title: "Error!",
                        text: "Failed to block the user.",
                        icon: "error"
                    });
                }
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                swalWithBootstrapButtons.fire({
                    title: "Cancelled",
                    text: "User not blocked.",
                    icon: "error"
                });
            }
        });
    }

    async function unblock(userId) {
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: "btn btn-success",
                cancelButton: "btn btn-danger"
            },
            buttonsStyling: true
        });

        swalWithBootstrapButtons.fire({
            title: "Are you sure?",
            text: "Do You want To UnBlock This User!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Unblock User!",
            cancelButtonText: "Cancel!",
            reverseButtons: true
        }).then(async (result) => {
            if (result.isConfirmed) {
                const response = await fetch(`/admin/unblockUser?userId=${userId}`, {
                    method: 'PUT'
                });
                if (response.ok) {
                    swalWithBootstrapButtons.fire({
                        title: "Unblocked!",
                        text: "User has been unblocked.",
                        icon: "success"
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    swalWithBootstrapButtons.fire({
                        title: "Error!",
                        text: "Failed to unblock the user.",
                        icon: "error"
                    });
                }
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                swalWithBootstrapButtons.fire({
                    title: "Cancelled",
                    text: "User not unblocked.",
                    icon: "error"
                });
            }
        });
    }
</script>

<style>
    .pagination-container {
        display: flex;
        justify-content: center; /* Center horizontally */
        margin-top: 20px; /* Adjust spacing as needed */
    }

    .pagination {
        border-radius: 0; /* Remove border radius if needed */
    }

    .pagination .page-item {
        border: 1px solid #fff; /* White border for page items */
    }

    .pagination .page-link {
        color: #fff; /* White text color */
        border: 1px solid #fff; /* White border */
    }

    .pagination .page-item.active .page-link {
        background-color: #fff; /* White background for active page */
        color: #000; /* Black text for active page */
    }

    .pagination .page-link:hover {
        background-color: #333; /* Dark grey background on hover */
    }
</style>

<%- include('../layout/adminlayout/footer')-%>
